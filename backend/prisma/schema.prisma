generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstname String
  lastname  String
  email     String @unique
  password  String // Required for manual authentication
  
  // User status and tracking
  isActive        Boolean @default(true)
  lastLoginAt    DateTime?
  loginAttempts  Int     @default(0)
  lockedUntil    DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // One user has one owner (their business)
  owner     Owner?
  
  // User analytics
  analytics UserAnalytics?
}

model Owner {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  phone       String?
  gstNumber   String?
  
  // Detailed address fields
  recipientName    String?
  houseNumber      String?
  streetName       String?
  locality         String?
  city             String?
  pinCode          String?
  state            String?
  
  compneyname String
  
  // Invoice instructions - customizable by each owner
  invoiceInstructions String? @db.Text // Multi-line text for invoice instructions
  
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers   Customer[]
  quotations  Quotation[]
  items       Item[]
  bankDetails BankDetails[]
  
  // Owner dashboard
  dashboard   OwnerDashboard?
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Customer {
  id         String      @id @default(uuid())
  name       String
  phone      String
  gstnumber  String?
  pannumber  String?
  
  // Detailed address fields
  recipientName    String?
  houseNumber      String?
  streetName       String?
  locality         String?
  city             String?
  pinCode          String?
  state            String?
  
  // Many customers belong to one owner
  ownerId    String
  owner      Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // One customer has many quotations
  quotations Quotation[]
  
  // Phone should be unique per owner, not globally
  @@unique([ownerId, phone])
  
  // Timestamps
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Quotation {
  id            String          @id @default(uuid())
  number        Int
  ownerId       String
  customerId    String
  bankdetailsId String?
  
  // Relations
  bankdetails   BankDetails?    @relation(fields: [bankdetailsId], references: [id])
  customer      Customer        @relation(fields: [customerId], references: [id])
  owner         Owner           @relation(fields: [ownerId], references: [id])
  items         QuotationItem[]
  
  // Payment tracking
  payment       Payment?
  
  // Quotation number should be unique per owner, not globally
  @@unique([ownerId, number])
  
  // Timestamps
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Item {
  id         String          @id @default(uuid())
  name       String
  brand      String
  quantity   Int?
  rate       Float
  
  // Many items belong to one owner
  ownerId    String
  owner      Owner           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // One item can be in many quotations
  quotations QuotationItem[]
  
  // Item name should be unique per owner, not globally
  @@unique([ownerId, name])
  
  // Timestamps
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model QuotationItem {
  id          String    @id @default(uuid())
  quotationId String
  itemId      String
  quantity    Int
  tax         Float     @default(0) // Tax percentage for this item in this quotation
  
  // Relations
  item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@unique([quotationId, itemId])
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BankDetails {
  id         String      @id @default(uuid())
  name       String
  ifsccode   String
  accountno  String
  bank       String
  upid       String
  upidname   String?
  

  
  // Many bank details belong to one owner
  ownerId    String
  owner      Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // One bank detail can be used in many quotations
  quotations Quotation[]
  
  // Account number should be unique per owner, not globally
  @@unique([ownerId, accountno])
  
  // Timestamps
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Payment tracking model
model Payment {
  id            String      @id @default(uuid())
  quotationId   String      @unique
  quotation     Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  transactionId String?
  paidAt        DateTime?
  dueDate       DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Payment tracking
  reminders     PaymentReminder[]
}

// Payment reminder tracking
model PaymentReminder {
  id        String   @id @default(uuid())
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  sentAt    DateTime @default(now())
  type      ReminderType
  status    ReminderStatus @default(SENT)
  
  createdAt DateTime @default(now())
}

// User analytics and tracking
model UserAnalytics {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Quotation statistics
  totalQuotationsCreated Int @default(0)
  totalRevenueGenerated  Float @default(0)
  totalAmountCollected   Float @default(0)
  totalAmountPending     Float @default(0)
  
  // Monthly tracking
  monthlyStats MonthlyRevenue[]
  
  // Customer statistics
  totalCustomersAdded    Int @default(0)
  totalItemsAdded        Int @default(0)
  
  // Last activity
  lastQuotationCreated   DateTime?
  lastPaymentReceived    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Monthly revenue tracking
model MonthlyRevenue {
  id        String   @id @default(uuid())
  analyticsId String
  analytics UserAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  
  year      Int
  month     Int // 1-12
  
  // Revenue metrics
  totalRevenue    Float @default(0)
  totalCollected  Float @default(0)
  totalPending    Float @default(0)
  
  // Quotation metrics
  quotationsCreated Int @default(0)
  quotationsPaid    Int @default(0)
  quotationsPending Int @default(0)
  
  // Customer metrics
  newCustomersAdded Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Unique constraint for year-month combination per user
  @@unique([analyticsId, year, month])
}

// Owner dashboard statistics
model OwnerDashboard {
  id        String   @id @default(uuid())
  ownerId   String   @unique
  owner     Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Overall statistics
  totalRevenue        Float @default(0)
  totalCollected      Float @default(0)
  totalPending        Float @default(0)
  totalQuotations     Int @default(0)
  totalCustomers      Int @default(0)
  totalItems          Int @default(0)
  
  // Monthly breakdown
  monthlyBreakdown    MonthlyOwnerRevenue[]
  
  // Recent activity
  lastQuotationDate   DateTime?
  lastPaymentDate     DateTime?
  lastCustomerAdded   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Monthly owner revenue tracking
model MonthlyOwnerRevenue {
  id        String   @id @default(uuid())
  dashboardId String
  dashboard OwnerDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  
  year      Int
  month     Int // 1-12
  
  // Revenue metrics
  revenue       Float @default(0)
  collected     Float @default(0)
  pending       Float @default(0)
  
  // Activity metrics
  quotationsCreated Int @default(0)
  quotationsPaid    Int @default(0)
  customersAdded    Int @default(0)
  itemsAdded        Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Unique constraint for year-month combination per owner
  @@unique([dashboardId, year, month])
}

// Enums for payment tracking
enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  UPI
  CHEQUE
  CARD
  OTHER
}

enum ReminderType {
  DUE_DATE
  OVERDUE
  FOLLOW_UP
}

enum ReminderStatus {
  SENT
  DELIVERED
  FAILED
}
