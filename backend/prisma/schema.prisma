generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstname String
  lastname  String
  email     String @unique
  password  String?
  googleId  String? @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // One user has one owner (their business)
  owner     Owner?
}

model Owner {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  phone       String?
  gstNumber   String?
  address     String
  compneyname String
  
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers   Customer[]
  quotations  Quotation[]
  items       Item[]
  bankDetails BankDetails[]
}

model Customer {
  id         String      @id @default(uuid())
  name       String
  address    String
  phone      String      @unique
  gstnumber  String?
  pannumber  String?
  
  // Many customers belong to one owner
  ownerId    String
  owner      Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // One customer has many quotations
  quotations Quotation[]
}

model Quotation {
  id            String          @id @default(uuid())
  number        Int             @unique
  ownerId       String
  customerId    String
  bankdetailsId String?
  
  // Relations
  bankdetails   BankDetails?    @relation(fields: [bankdetailsId], references: [id])
  customer      Customer        @relation(fields: [customerId], references: [id])
  owner         Owner           @relation(fields: [ownerId], references: [id])
  items         QuotationItem[]
}

model Item {
  id         String          @id @default(uuid())
  name       String          @unique
  brand      String
  quantity   Int?
  rate       Float
  tax        Float
  
  // Many items belong to one owner
  ownerId    String
  owner      Owner           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // One item can be in many quotations
  quotations QuotationItem[]
}

model QuotationItem {
  id          String    @id @default(uuid())
  quotationId String
  itemId      String
  quantity    Int
  
  // Relations
  item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@unique([quotationId, itemId])
}

model BankDetails {
  id         String      @id @default(uuid())
  name       String
  ifsccode   String
  accountno  String      @unique
  bank       String
  upid       String
  upidname   String?
  
  // Many bank details belong to one owner
  ownerId    String
  owner      Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // One bank detail can be used in many quotations
  quotations Quotation[]
}
